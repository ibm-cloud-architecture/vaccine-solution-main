{"componentChunkName":"component---src-pages-devops-index-mdx","path":"/devops/","result":{"pageContext":{"frontmatter":{"title":"DevOps with GitOps and Tekton","description":"DevOps with GitOps and Tekton"},"relativePagePath":"/devops/index.mdx","titleType":"append","MdxNode":{"id":"76352026-36ba-52cf-9916-d35122975d50","children":[],"parent":"e73846f4-5405-5ec7-b2e0-29aa13b49333","internal":{"content":"---\ntitle: DevOps with GitOps and Tekton\ndescription: DevOps with GitOps and Tekton\n---\n\n## Development flow \n\n ![1](./images/appsody-flow.png)\n\n## GitOps\n\nOur Continuous Integration (CI) approach is one of _\"zero-infrastructure overhead\"_, as such Cloud Pak for application and the garage team have adopted [GitOps](https://www.gitops.tech/#what-is-gitops) where a [specific git repository](https://github.ibm.com/vaccine-cold-chain/gitops-dev) contains declarative descriptions of the infrastructure currently desired environments (dev, staging, production), combined with [Appsody deploy]() commands and [Tekton](#tekton-pipeline) to automate the devops pipeline.\n\nEach application repository includes deployment manifests (app-deploy.yaml) to configure the application at deployment time.  \n\nThe [gitops-dev](https://github.ibm.com/vaccine-cold-chain/gitops-dev) repository contains all deployment manifests of the currently desired infrastructure of an deployment environment.\n\nWe are using a pull-based deployments, where the build pipeline is triggered by a pull requests or a commit on the application repository, and an operator, running in the solution namespace, is continuously comparing the desired state in the environment repository with the actual state in the deployed infrastructure.\n\n## Tekton Pipeline\n\n[Tekton](https://tekton.dev/) is an open source project that provides a framework to create cloud-native CI/CD pipelines quickly. As a Kubernetes-native framework, Tekton makes it easier to deploy across multiple cloud providers or hybrid environments.\n\n### Pre-requisites\n\n* [Have Appsody CLI install locally and Appsody Operator deployed to your OpenShift cluster](https://appsody.dev/docs/using-appsody/deploying/)\n* [Your OpenShift cluster can access the github repository where the source code resides]()\n* [Your OpenShift cluster can access a docker registry like docker hub or internal registry within the cluster]()\n* Defined a secret for docker registry credential: \n    * First if not done before, create an access token to your dockerhub account, using the setting > security option.\n    * Then execute: `oc create secret generic dockerhub-secret --from-literal=token=<you-created-token-on-dockerhub>`\n\n* [Have Tekton CLI installed](https://github.com/tektoncd/cli#installing-tkn)\n\n### Install Tekton pipeline\n\nSee the [instructions here](https://github.com/tektoncd/pipeline/blob/master/docs/install.md) which can be summarized by the following steps:\n\n```shell\n# create dedicated pipeline project\noc new-project tekton-pipelines\n# Give access to current user and to the appsody service account.\noc adm policy add-scc-to-user anyuid -z tekton-pipelines-controller\n# install tekton\noc apply --filename https://storage.googleapis.com/tekton-releases/pipeline/latest/release.notags.yaml\n# Verify pods are started\noc get pods --namespace tekton-pipelines --watch\n\nNAME                                           READY     STATUS    RESTARTS   AGE\ntekton-pipelines-controller-6ff7d8f9bf-k7ks2   1/1       Running   0          4m\ntekton-pipelines-webhook-7986458f5f-kr78z      1/1       Running   0          4m\n# Add persistence volume\noc apply -f tektom/pv.yaml\n```\n\nFor a given solution including multiple components deployed as pods, in the same namespace it is recommended to create a service account like the following manifest.\n\n```yaml\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: vaccine-solution-sa\nsecrets:\n    - name: dockerhub-secret\n---  \napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: appsody-admin\nsubjects:\n- kind: ServiceAccount\n  name: vaccine-solution-sa \n  namespace: vaccine-cold-chain\nroleRef:\n  kind: ClusterRole\n  name: cluster-admin\n  apiGroup: rbac.authorization.k8s.io\n```\n\nOne of such file is in the gitops-ev project. \n\n```shell\noc apply -f tekton/appsody-tekton.yaml\n```\n\n\n### Application deployment\n\nEach application is built with Appsody and deployed via Appsody operator. Defined in the [tekton directory](https://github.ibm.com/vaccine-cold-chain/gitops-dev/tree/master/tekton) of the gitops-dev project, we have a simple pipeline that will utilize the appsody deploy command to deploy the generated AppsodyApplication CRD YAML to the target environment.\n\nTekton Pipelines run on the same cluster (and often in the same namespace!) as your running application code, thus allowing for more programmatic control over the deployment, management, operations, and existence of your application components. The key artifact that enables Tekton to deploy any Appsody-based microservice is the generated `app-deploy.yaml` file. \n\nWe need to define a pipeline which may look the same for each project. Still for clear separation of concern, each java projet includes a `src/main/tekton` folder with the needed pipeline, resources and task manifests. Here is an example of pipeline: \n\n```yaml\napiVersion: tekton.dev/v1alpha1\nkind: Pipeline\nmetadata:\n  name: appsody-build-pipeline\nspec:\n  resources:\n    - name: git-source\n      type: git\n    - name: docker-image\n      type: image\n  tasks:\n    - name: appsody-build\n      taskRef:\n        name: appsody-build-push-deploy-task\n      resources:\n        inputs:\n        - name: git-source\n          resource: git-source\n        - name: docker-image\n          resource: docker-image\n      params:\n      - name: app-deploy-file-name\n        value: app-deploy.yaml\n```\n\nand pipeline resources that define the target docker image name and the URL of the source repository, those resources are per project. See an example [here]()\n\nThe pipeline is executing a Tekton task named `appsody-build-push-deploy-task` and example can be found [here](https://raw.githubusercontent.com/appsody/tekton-example/master/appsody-build-push-deploy.yaml). \n\nWhen `appsody build` is executed the deployment manifest for the application (app-deploy.yaml file) is created or updated, the deployment will use this file for the `oc apply ` command.\n\nThe image url must match the definition of the Docker image resource that you created for the pipeline.\n\nTo run the pipeline manually use the pipeline-run manifest. For example for the reefer monitorign service the manifest is under the `scripts` folder:\n\n```shell\noc apply -f scripts/reefer-monitoring-pipeline-run.yaml \n# verify the pipeline run\ntkn pipelinerun list\nNAME                                  STARTED          DURATION   STATUS\nreefer-monitoring-pipeline-run-task   31 seconds ago   ---        Running\n```\n\nOnce the `appsody deploy` command is succesful, the Appsody Operator and Kubernetes takes care of the rest and reconciles the necessary underlying Kubernetes artifacts that are required to fulfill the requirements of serving up the application code in real-time!\n\n## Recommended readings\n\n* [What is gitops](https://www.gitops.tech/)\n* [Tekton playground on katacoda](https://www.katacoda.com/ratrosyu/scenarios/playground)\n* [Using Tekton with Appsody example](https://github.com/appsody/tekton-example)\n* [IBM Multicloud Manager is introducing GitOps support with Argo CD](https://www.ibm.com/cloud/blog/simplify-and-automate-deployments-using-gitops-with-ibm-multicloud-manager-3-1-2)\n* [Fun with GitOps stitching Kubernetes, Tekton, and Argo](https://medium.com/ibm-garage/fun-with-gitops-stitching-kubernetes-tekton-and-argo-ee348afd0b08)\n* [OpenShift Pipelines - Cloud-native CI/CD](https://www.openshift.com/learn/topics/pipelines)\n\n","type":"Mdx","contentDigest":"d28624bd1b0a56d152caa4789db2e470","counter":322,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"DevOps with GitOps and Tekton","description":"DevOps with GitOps and Tekton"},"exports":{},"rawBody":"---\ntitle: DevOps with GitOps and Tekton\ndescription: DevOps with GitOps and Tekton\n---\n\n## Development flow \n\n ![1](./images/appsody-flow.png)\n\n## GitOps\n\nOur Continuous Integration (CI) approach is one of _\"zero-infrastructure overhead\"_, as such Cloud Pak for application and the garage team have adopted [GitOps](https://www.gitops.tech/#what-is-gitops) where a [specific git repository](https://github.ibm.com/vaccine-cold-chain/gitops-dev) contains declarative descriptions of the infrastructure currently desired environments (dev, staging, production), combined with [Appsody deploy]() commands and [Tekton](#tekton-pipeline) to automate the devops pipeline.\n\nEach application repository includes deployment manifests (app-deploy.yaml) to configure the application at deployment time.  \n\nThe [gitops-dev](https://github.ibm.com/vaccine-cold-chain/gitops-dev) repository contains all deployment manifests of the currently desired infrastructure of an deployment environment.\n\nWe are using a pull-based deployments, where the build pipeline is triggered by a pull requests or a commit on the application repository, and an operator, running in the solution namespace, is continuously comparing the desired state in the environment repository with the actual state in the deployed infrastructure.\n\n## Tekton Pipeline\n\n[Tekton](https://tekton.dev/) is an open source project that provides a framework to create cloud-native CI/CD pipelines quickly. As a Kubernetes-native framework, Tekton makes it easier to deploy across multiple cloud providers or hybrid environments.\n\n### Pre-requisites\n\n* [Have Appsody CLI install locally and Appsody Operator deployed to your OpenShift cluster](https://appsody.dev/docs/using-appsody/deploying/)\n* [Your OpenShift cluster can access the github repository where the source code resides]()\n* [Your OpenShift cluster can access a docker registry like docker hub or internal registry within the cluster]()\n* Defined a secret for docker registry credential: \n    * First if not done before, create an access token to your dockerhub account, using the setting > security option.\n    * Then execute: `oc create secret generic dockerhub-secret --from-literal=token=<you-created-token-on-dockerhub>`\n\n* [Have Tekton CLI installed](https://github.com/tektoncd/cli#installing-tkn)\n\n### Install Tekton pipeline\n\nSee the [instructions here](https://github.com/tektoncd/pipeline/blob/master/docs/install.md) which can be summarized by the following steps:\n\n```shell\n# create dedicated pipeline project\noc new-project tekton-pipelines\n# Give access to current user and to the appsody service account.\noc adm policy add-scc-to-user anyuid -z tekton-pipelines-controller\n# install tekton\noc apply --filename https://storage.googleapis.com/tekton-releases/pipeline/latest/release.notags.yaml\n# Verify pods are started\noc get pods --namespace tekton-pipelines --watch\n\nNAME                                           READY     STATUS    RESTARTS   AGE\ntekton-pipelines-controller-6ff7d8f9bf-k7ks2   1/1       Running   0          4m\ntekton-pipelines-webhook-7986458f5f-kr78z      1/1       Running   0          4m\n# Add persistence volume\noc apply -f tektom/pv.yaml\n```\n\nFor a given solution including multiple components deployed as pods, in the same namespace it is recommended to create a service account like the following manifest.\n\n```yaml\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: vaccine-solution-sa\nsecrets:\n    - name: dockerhub-secret\n---  \napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: appsody-admin\nsubjects:\n- kind: ServiceAccount\n  name: vaccine-solution-sa \n  namespace: vaccine-cold-chain\nroleRef:\n  kind: ClusterRole\n  name: cluster-admin\n  apiGroup: rbac.authorization.k8s.io\n```\n\nOne of such file is in the gitops-ev project. \n\n```shell\noc apply -f tekton/appsody-tekton.yaml\n```\n\n\n### Application deployment\n\nEach application is built with Appsody and deployed via Appsody operator. Defined in the [tekton directory](https://github.ibm.com/vaccine-cold-chain/gitops-dev/tree/master/tekton) of the gitops-dev project, we have a simple pipeline that will utilize the appsody deploy command to deploy the generated AppsodyApplication CRD YAML to the target environment.\n\nTekton Pipelines run on the same cluster (and often in the same namespace!) as your running application code, thus allowing for more programmatic control over the deployment, management, operations, and existence of your application components. The key artifact that enables Tekton to deploy any Appsody-based microservice is the generated `app-deploy.yaml` file. \n\nWe need to define a pipeline which may look the same for each project. Still for clear separation of concern, each java projet includes a `src/main/tekton` folder with the needed pipeline, resources and task manifests. Here is an example of pipeline: \n\n```yaml\napiVersion: tekton.dev/v1alpha1\nkind: Pipeline\nmetadata:\n  name: appsody-build-pipeline\nspec:\n  resources:\n    - name: git-source\n      type: git\n    - name: docker-image\n      type: image\n  tasks:\n    - name: appsody-build\n      taskRef:\n        name: appsody-build-push-deploy-task\n      resources:\n        inputs:\n        - name: git-source\n          resource: git-source\n        - name: docker-image\n          resource: docker-image\n      params:\n      - name: app-deploy-file-name\n        value: app-deploy.yaml\n```\n\nand pipeline resources that define the target docker image name and the URL of the source repository, those resources are per project. See an example [here]()\n\nThe pipeline is executing a Tekton task named `appsody-build-push-deploy-task` and example can be found [here](https://raw.githubusercontent.com/appsody/tekton-example/master/appsody-build-push-deploy.yaml). \n\nWhen `appsody build` is executed the deployment manifest for the application (app-deploy.yaml file) is created or updated, the deployment will use this file for the `oc apply ` command.\n\nThe image url must match the definition of the Docker image resource that you created for the pipeline.\n\nTo run the pipeline manually use the pipeline-run manifest. For example for the reefer monitorign service the manifest is under the `scripts` folder:\n\n```shell\noc apply -f scripts/reefer-monitoring-pipeline-run.yaml \n# verify the pipeline run\ntkn pipelinerun list\nNAME                                  STARTED          DURATION   STATUS\nreefer-monitoring-pipeline-run-task   31 seconds ago   ---        Running\n```\n\nOnce the `appsody deploy` command is succesful, the Appsody Operator and Kubernetes takes care of the rest and reconciles the necessary underlying Kubernetes artifacts that are required to fulfill the requirements of serving up the application code in real-time!\n\n## Recommended readings\n\n* [What is gitops](https://www.gitops.tech/)\n* [Tekton playground on katacoda](https://www.katacoda.com/ratrosyu/scenarios/playground)\n* [Using Tekton with Appsody example](https://github.com/appsody/tekton-example)\n* [IBM Multicloud Manager is introducing GitOps support with Argo CD](https://www.ibm.com/cloud/blog/simplify-and-automate-deployments-using-gitops-with-ibm-multicloud-manager-3-1-2)\n* [Fun with GitOps stitching Kubernetes, Tekton, and Argo](https://medium.com/ibm-garage/fun-with-gitops-stitching-kubernetes-tekton-and-argo-ee348afd0b08)\n* [OpenShift Pipelines - Cloud-native CI/CD](https://www.openshift.com/learn/topics/pipelines)\n\n","fileAbsolutePath":"/home/runner/work/vaccine-solution-main/vaccine-solution-main/docs/src/pages/devops/index.mdx"}}},"staticQueryHashes":["1054721580","1054721580","1364590287","2102389209","2102389209","2456312558","2746626797","3018647132","3037994772","768070550"]}