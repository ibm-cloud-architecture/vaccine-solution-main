{"componentChunkName":"component---src-pages-devops-ci-mdx","path":"/devops/ci/","result":{"pageContext":{"frontmatter":{"title":"Continuous Integration","description":"Continuous Integration"},"relativePagePath":"/devops/ci.mdx","titleType":"append","MdxNode":{"id":"5bf0532e-f152-5679-bb15-b52ccbd2eca4","children":[],"parent":"05146aa9-c0aa-5e0f-8986-f3a0d15b6a23","internal":{"content":"---\ntitle: Continuous Integration\ndescription: Continuous Integration\n---\n\nOur Continuous Integration (CI) approach is one of _\"zero-infrastructure overhead\"_. As such, we utilize [GitHub Actions](https://github.com/features/actions) to build and push the microservice's associated container image to Docker Hub for public consumption.  The GitHub Actions workflows are defined in the owning repository's `.github/workflows/dockerbuild.yaml` file.\n\n## Overview of Continuous Integration workflows for this solution\n\nThe continuous integration workflow for our project looks in the figure below, which are detailing in next sections:\n\n![CI main](./images/ci-main.png)\n\nOn the left side, the developer uses his environment with Appsody CLI to build, and test his code, once tests run successfully, he commits and pushes the code to the master branch, then the github workflow triggers...\n\n### 1 - Validate Docker Secrets\n\nThe first job in each GitHub Actions workflow, **[validate-docker-secrets](https://github.com/ibm-cloud-architecture/refarch-reefer-ml/blob/df754fa54f4a41b85e93a8f059977bdaccd67ddc/.github/workflows/dockerbuild.yaml#L18-L52)**, ensures that all the necessary Secrets are defined on the repository under which the build action is running. Similar to Kubernetes Secrets, [GitHub Repository Secrets](https://help.github.com/en/actions/automating-your-workflow-with-github-actions/creating-and-using-encrypted-secrets) allow you to store encrypted, sensitive information in a programmatically accessible way.\n\nHere is an example of such secret definitions:\n\n![Gihub Secrets](./images/github-secrets.png)\n\n### 2 - Build Component Images\n\n\n### 3 - GitOps Updates\n\nThe final job, **[gitops-repo-webhook](https://github.com/ibm-cloud-architecture/refarch-kc-container-ms/blob/f79821a3f6eeaa5b52048ef2a2aa32bdc5f58dd5/.github/workflows/dockerbuild.yaml#L96-L104)**, is a linkage to our general continuous deployment process, which is GitOps-based and available via [ibm-cloud-architecture/refarch-kc-gitops](https://github.com/ibm-cloud-architecture/refarch-kc-gitops). This step performs a webhook call to our GitOps repository and notifies that repository's GitHub Actions that an update to one of its component's container images has been made and it should scan for the latest version of all the known container images and update the associated YAML files for environment updates. The repository action dispatcher triggers the git action workflow as defined [here](https://github.com/ibm-cloud-architecture/refarch-kc-gitops/blob/master/.github/workflows/update-gitops-deployments-(eda-integration).yaml) so the corresponding yaml files (appsody and helm configurations) can be updated (See [this repository](https://github.com/ibm-cloud-architecture/actions-update-gitops) to understand the action update gitops).\n\nHere is an example of [appsody.yaml](https://github.com/ibm-cloud-architecture/refarch-kc-gitops/blob/eda-integration/gse-eda-demos.us-east.containers.appdomain.cloud/reefersimulator/appsody/app-deploy.yaml) automatically modified in the github repository:\n\n```yaml\n...\n  labels:\n    image.opencontainers.org/title: reefer-simulator\n    stack.appsody.dev/version: 0.1.6\n  name: reefer-simulator\nspec:\n  applicationImage: ibmcase/kcontainer-reefer-simulator-appsody:0.1.26\n```\n\nFurther description of this continuous deployment process is covered in [Continuous Deployment note](cd.md).\n","type":"Mdx","contentDigest":"61ad00528f02f9f8861e068461a2a01f","counter":321,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"Continuous Integration","description":"Continuous Integration"},"exports":{},"rawBody":"---\ntitle: Continuous Integration\ndescription: Continuous Integration\n---\n\nOur Continuous Integration (CI) approach is one of _\"zero-infrastructure overhead\"_. As such, we utilize [GitHub Actions](https://github.com/features/actions) to build and push the microservice's associated container image to Docker Hub for public consumption.  The GitHub Actions workflows are defined in the owning repository's `.github/workflows/dockerbuild.yaml` file.\n\n## Overview of Continuous Integration workflows for this solution\n\nThe continuous integration workflow for our project looks in the figure below, which are detailing in next sections:\n\n![CI main](./images/ci-main.png)\n\nOn the left side, the developer uses his environment with Appsody CLI to build, and test his code, once tests run successfully, he commits and pushes the code to the master branch, then the github workflow triggers...\n\n### 1 - Validate Docker Secrets\n\nThe first job in each GitHub Actions workflow, **[validate-docker-secrets](https://github.com/ibm-cloud-architecture/refarch-reefer-ml/blob/df754fa54f4a41b85e93a8f059977bdaccd67ddc/.github/workflows/dockerbuild.yaml#L18-L52)**, ensures that all the necessary Secrets are defined on the repository under which the build action is running. Similar to Kubernetes Secrets, [GitHub Repository Secrets](https://help.github.com/en/actions/automating-your-workflow-with-github-actions/creating-and-using-encrypted-secrets) allow you to store encrypted, sensitive information in a programmatically accessible way.\n\nHere is an example of such secret definitions:\n\n![Gihub Secrets](./images/github-secrets.png)\n\n### 2 - Build Component Images\n\n\n### 3 - GitOps Updates\n\nThe final job, **[gitops-repo-webhook](https://github.com/ibm-cloud-architecture/refarch-kc-container-ms/blob/f79821a3f6eeaa5b52048ef2a2aa32bdc5f58dd5/.github/workflows/dockerbuild.yaml#L96-L104)**, is a linkage to our general continuous deployment process, which is GitOps-based and available via [ibm-cloud-architecture/refarch-kc-gitops](https://github.com/ibm-cloud-architecture/refarch-kc-gitops). This step performs a webhook call to our GitOps repository and notifies that repository's GitHub Actions that an update to one of its component's container images has been made and it should scan for the latest version of all the known container images and update the associated YAML files for environment updates. The repository action dispatcher triggers the git action workflow as defined [here](https://github.com/ibm-cloud-architecture/refarch-kc-gitops/blob/master/.github/workflows/update-gitops-deployments-(eda-integration).yaml) so the corresponding yaml files (appsody and helm configurations) can be updated (See [this repository](https://github.com/ibm-cloud-architecture/actions-update-gitops) to understand the action update gitops).\n\nHere is an example of [appsody.yaml](https://github.com/ibm-cloud-architecture/refarch-kc-gitops/blob/eda-integration/gse-eda-demos.us-east.containers.appdomain.cloud/reefersimulator/appsody/app-deploy.yaml) automatically modified in the github repository:\n\n```yaml\n...\n  labels:\n    image.opencontainers.org/title: reefer-simulator\n    stack.appsody.dev/version: 0.1.6\n  name: reefer-simulator\nspec:\n  applicationImage: ibmcase/kcontainer-reefer-simulator-appsody:0.1.26\n```\n\nFurther description of this continuous deployment process is covered in [Continuous Deployment note](cd.md).\n","fileAbsolutePath":"/home/runner/work/vaccine-solution-main/vaccine-solution-main/docs/src/pages/devops/ci.mdx"}}},"staticQueryHashes":["1054721580","1054721580","1364590287","2102389209","2102389209","2456312558","2746626797","3018647132","3037994772","768070550"]}